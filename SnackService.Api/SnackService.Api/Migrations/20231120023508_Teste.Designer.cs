// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SnackService.Api.Context;

namespace SnackService.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231120023508_Teste")]
    partial class Teste
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SnackService.Api.Model.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Endereco");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("Cidade");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(true)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("DateTime2")
                        .HasColumnName("DataDeNascimento");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("Nome");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("Bairro");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Numero");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("Sexo");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Telefone");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Cep");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ba34b384-b580-42d2-99f8-36b32ded911d"),
                            Address = "Rua Ayrton Senna",
                            City = "Blumenau",
                            Cpf = "04609615002",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 182, DateTimeKind.Local).AddTicks(9602),
                            Name = "Marcia Pereira dos Santos",
                            Neighborhood = "Água Verde",
                            Number = 6548,
                            Sex = "F",
                            Telephone = "51985650321",
                            ZipCode = "89037362"
                        },
                        new
                        {
                            Id = new Guid("97bc85a4-a519-48e0-9353-be637a06cfd4"),
                            Address = "Rua Inspetor Miguel Amorim",
                            City = "Macapá",
                            Cpf = "87270897034",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3317),
                            Name = "João da Rosa Martins Pereira",
                            Neighborhood = "Universidade",
                            Number = 562,
                            Sex = "M",
                            Telephone = "51986325321",
                            ZipCode = "68903517"
                        },
                        new
                        {
                            Id = new Guid("9a8d906f-cfed-4c25-a71d-0eaeae8864cb"),
                            Address = "Rua Valdyr Grando",
                            City = "Curitiba",
                            Cpf = "35664447079",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3337),
                            Name = "Lauro da Silva da Cunha",
                            Neighborhood = "Cidade Industrial",
                            Number = 62,
                            Sex = "M",
                            Telephone = "51985650888",
                            ZipCode = "81310370"
                        },
                        new
                        {
                            Id = new Guid("ffbca445-aca3-4aad-86cb-1a169146464c"),
                            Address = "Rua da Praça",
                            City = "Maranguape",
                            Cpf = "75367668070",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3342),
                            Name = "Jaqueline da Rosa Martins",
                            Neighborhood = "Novo Maranguape I",
                            Number = 77,
                            Sex = "F",
                            Telephone = "519856450321",
                            ZipCode = "61943015"
                        },
                        new
                        {
                            Id = new Guid("afec2c8d-8376-4e56-b1e0-e24f57ea2cc7"),
                            Address = "Rua Mário Mendes de Lara",
                            City = "Curitiba",
                            Cpf = "48490807078",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3345),
                            Name = "Claudio Nascimento do Santos",
                            Neighborhood = "Uberaba",
                            Number = 3021,
                            Sex = "M",
                            Telephone = "51985600021",
                            ZipCode = "81570200"
                        },
                        new
                        {
                            Id = new Guid("1f5605c7-ae5e-497a-bdc7-2b5406737b31"),
                            Address = "Rua Piauí",
                            City = "Imperatriz",
                            Cpf = "93852857007",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3349),
                            Name = "Juliano Pereira da Silva",
                            Neighborhood = "Centro",
                            Number = 56,
                            Sex = "M",
                            Telephone = "51989650321",
                            ZipCode = "65901600"
                        },
                        new
                        {
                            Id = new Guid("482031a5-c907-4969-ba9f-5347b15177d4"),
                            Address = "Rua das Algas Marinhas",
                            City = "Parnamirim",
                            Cpf = "72155881061",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3353),
                            Name = "Carlos Pereira da Silva",
                            Neighborhood = "Bela Parnamirim",
                            Number = 623,
                            Sex = "M",
                            Telephone = "51985999321",
                            ZipCode = "59142505"
                        },
                        new
                        {
                            Id = new Guid("e79de945-ef33-4bf4-bf92-0d7c71da252b"),
                            Address = "Rua Domingos Leite",
                            City = "Parnaíba",
                            Cpf = "83241546047",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3376),
                            Name = "Jurema da Rosa Martins",
                            Neighborhood = "São José",
                            Number = 352,
                            Sex = "F",
                            Telephone = "51933350321",
                            ZipCode = "64218050"
                        },
                        new
                        {
                            Id = new Guid("f1af47a1-b3e7-49a5-86aa-58b5d0040227"),
                            Address = "Rua do Comércio",
                            City = "Maringá",
                            Cpf = "72241909009",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3379),
                            Name = "Isabel Borba da Silva",
                            Neighborhood = "Zona 06",
                            Number = 77,
                            Sex = "F",
                            Telephone = "51933353621",
                            ZipCode = "87080180"
                        },
                        new
                        {
                            Id = new Guid("22269b91-2f27-4c83-91ab-ae6773a8ad75"),
                            Address = "Rua Cherobina de Carvalho Pinto",
                            City = "Aracaju",
                            Cpf = "26116317006",
                            DateOfBirth = new DateTime(2023, 11, 19, 23, 35, 8, 184, DateTimeKind.Local).AddTicks(3383),
                            Name = "Luis Marcelo da Silva Cunha",
                            Neighborhood = "Jardins",
                            Number = 127,
                            Sex = "M",
                            Telephone = "51933389541",
                            ZipCode = "49025820"
                        });
                });

            modelBuilder.Entity("SnackService.Api.Model.Deliveryman", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(true)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("Nome");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Telefone");

                    b.HasKey("Id");

                    b.ToTable("Entregadores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1badae8-617c-4dde-b125-effd3a7310f6"),
                            Cpf = "84481330058",
                            Name = "Renato Borges do Santos",
                            Status = 1,
                            Telephone = "51986541236"
                        },
                        new
                        {
                            Id = new Guid("94ace7c7-2167-4b99-9f3d-f5e442cc5ae9"),
                            Cpf = "18087267079",
                            Name = "Eduardo Gonsalves da Silva",
                            Status = 1,
                            Telephone = "51986532104"
                        },
                        new
                        {
                            Id = new Guid("af54c80e-ffde-425c-9c65-da55e2200360"),
                            Cpf = "99026185022",
                            Name = "Marcelo Guimarãoes da Rosa",
                            Status = 1,
                            Telephone = "51994530126"
                        },
                        new
                        {
                            Id = new Guid("c3c768d4-0cec-4c12-9a20-92db91012b1a"),
                            Cpf = "32578255016",
                            Name = "Luiz da Silva Pereira do Santos",
                            Status = 1,
                            Telephone = "5198632541"
                        },
                        new
                        {
                            Id = new Guid("5775a3c5-06bc-43f7-959b-0a3b4f7ba7ac"),
                            Cpf = "51442876034",
                            Name = "Jaqueline da Rocha Martins",
                            Status = 1,
                            Telephone = "51986532541"
                        });
                });

            modelBuilder.Entity("SnackService.Api.Model.Ordered", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateHour")
                        .HasColumnType("Datetime")
                        .HasColumnName("DataHora");

                    b.Property<Guid?>("DeliverymanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Descricao");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Observacao");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliverymanId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("SnackService.Api.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Descricao");

                    b.Property<string>("Observation")
                        .HasColumnType("text")
                        .HasColumnName("Observacao");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0be28306-4956-445e-aab8-f1f93a494cd9"),
                            Description = "Alaminutas",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bb02fb2c-df70-45a8-ac2d-60b80d85095b"),
                            Description = "Destaques de Ofertas",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2a045466-a466-4a11-a85e-9277f1f4dd8e"),
                            Description = "Promoção de Pizzas",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f2d8d867-6cf2-4d17-99d0-cb7eaf81fb80"),
                            Description = "Xis",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("d94b460f-7eee-47d6-aeaa-593206895612"),
                            Description = "Dog",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("808017c9-40b6-40e2-a002-b4ba28f4bc13"),
                            Description = "Pastéis",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("bd4a14a1-79f7-400d-a576-7a83e0fc2a7b"),
                            Description = "Açaís",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("359e7095-85db-4a56-bf08-31cc8abbdcdf"),
                            Description = "Bebidas",
                            Observation = "Não trabalhanos com Coca-Cola Light",
                            Status = 1
                        });
                });

            modelBuilder.Entity("SnackService.Api.Models.Input", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Descricao");

                    b.Property<string>("Observation")
                        .HasColumnType("text")
                        .HasColumnName("Observacao");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Insumos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac515b07-a7b6-47c9-ae8b-c87b9ac69415"),
                            CategoryId = new Guid("fb040e76-9864-43df-a215-055109e9de63"),
                            Description = "Salada",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("56835e41-3146-44f5-8aba-ce9f25809466"),
                            CategoryId = new Guid("fd3dfb6a-c214-40cc-9683-b7343e46b14a"),
                            Description = "Bife de Gado",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("c083e644-b780-4131-b413-75aecff63483"),
                            CategoryId = new Guid("8a5e9d8f-ff01-40fe-b83c-362ad44e2e42"),
                            Description = "Bife de Frango",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("68169a36-eef0-45d8-95ee-a527a3170fa7"),
                            CategoryId = new Guid("abc3e2dd-909d-45f3-a3a0-b6a0ecc12163"),
                            Description = "Filé de Peixe",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("9e3fcefa-3155-4e88-81cf-4318cf6bbeb7"),
                            CategoryId = new Guid("29c9d3f8-34d5-416b-ac59-9f6ecd75c998"),
                            Description = "Chuleta gado Acebolada",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("de2174ff-9224-4360-94ca-7d73b8d74ede"),
                            CategoryId = new Guid("90ed8fff-8c8d-4b93-aa75-b55e655697b8"),
                            Description = "Chuleta de gado",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2cb33eb5-23d2-4612-8ece-6d97ee1893d9"),
                            CategoryId = new Guid("2625a199-ce2b-4701-8a15-9c3464fe8731"),
                            Description = "Bife á parmediana",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("fed45af9-9e0f-49fc-b5b5-136af314b834"),
                            CategoryId = new Guid("2d0005b5-d7e6-49a1-b5db-32014619b1b4"),
                            Description = "Porção de Arroz",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("1d3c6fed-a7c3-4904-8fdf-dc24ee8f5870"),
                            CategoryId = new Guid("2d2604b4-d8f6-4f9b-a5b2-a1a5479f5078"),
                            Description = "Porção de Feijão",
                            Observation = "",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e63b618f-04fe-4d1a-94ce-ea8cec3704ee"),
                            CategoryId = new Guid("9dbec9e8-e7cd-415d-a638-3545bfedad68"),
                            Description = "Porção de Massa",
                            Observation = "",
                            Status = 1
                        });
                });

            modelBuilder.Entity("SnackService.Api.Model.Ordered", b =>
                {
                    b.HasOne("SnackService.Api.Model.Customer", "Customer")
                        .WithMany("Ordered")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SnackService.Api.Model.Deliveryman", "Deliveryman")
                        .WithMany("Ordered")
                        .HasForeignKey("DeliverymanId");

                    b.Navigation("Customer");

                    b.Navigation("Deliveryman");
                });

            modelBuilder.Entity("SnackService.Api.Models.Input", b =>
                {
                    b.HasOne("SnackService.Api.Models.Category", "Category")
                        .WithMany("Input")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SnackService.Api.Model.Customer", b =>
                {
                    b.Navigation("Ordered");
                });

            modelBuilder.Entity("SnackService.Api.Model.Deliveryman", b =>
                {
                    b.Navigation("Ordered");
                });

            modelBuilder.Entity("SnackService.Api.Models.Category", b =>
                {
                    b.Navigation("Input");
                });
#pragma warning restore 612, 618
        }
    }
}
